Basicaly the project comes from Steven Sanderson's blog  (http://blog.stevensanderson.com/2009/06/11/integration-testing-your-aspnet-mvc-application/)Typically, ASP.NET MVC developers have written integration tests using a browser automation tool, such as Selenium or Microsoft’s Lightweight Test Automation Framework....However, there are some drawbacks to browser automation....So, how can we do integration testing without browser automation?...What if you could write NUnit tests (or xUnit or whatever you prefer) that directly submit a URL, query string, cookies, request headers, etc., into your application – without needing the app to be hosted in any web server but still running in the real (non-mocked) ASP.NET runtime – and get back the response text to make assertions about? In fact, what if you also got back the ActionResult (e.g., a ViewResult) that was executed, a reference to any unhandled exception it threw, and could also write assertions about cookie values or the contents of Session? What if you could string together a series of test requests to simulate a user’s browsing session, checking that a whole feature area works from end to end?Well, my friend, all this can be yours with MvcIntegrationTestFramework :)